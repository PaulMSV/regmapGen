.. _spi:

===
SPI
===

Сигналы
=======

Следующие сигналы будут использованы в интерфейсе Регистровой карты.

========= ====== =========== =========================================================
Сигнал    Ширина Направление Описание
========= ====== =========== =========================================================
spi_sck   1      input       SPI clock from master
spi_cs_n  1      input       SPI chip select from master (active low)
spi_mosi  1      input       SPI data from master
spi_miso  1      output      SPI data to master
========= ====== =========== =========================================================

Особенности применения:

* SPI ведомый (slave)
* поддерживается только Mode 0 (CPOL=0 и CPHA=0):
    * полярность тактового сигнала - 0 в idle-состоянии
    * фаза тактового сигнала - данные сэмплируются по фронту и сдвигаются по срезу
* старший значимый бит (MSB) передается первым
* порядок байтов - от старшего к младшему
* частота ``spi_sck`` должна быть как минимум в 8 раз ниже системной частоты ``clk``

Передача
========

В примерах ниже ширина данных 16 бит и ширина адреса 8 бит.

Запись
------

* Запись данных ``D15-D0`` по адресу ``A7-A0``.
* MSB бит контрольного байта равен 1 (операция записи).
* ``WB1``, ``WB0`` - байты стробов записи устанавливаются в 1 для записи всех байтов.

.. wavedrom::

    {"signal": [
        {"name": "spi_sck", "wave": "0..HLHL|.HLHL|.HLHL.HLHL|.HL.."},
        {"name": "spi_cs_n", "wave": "10...........................1"},
        {"name": "spi_mosi", "wave": "0.3.3.3|3.4.4|4.4.5..5.5|5.0..", "data": ["A7", "A6", "", "A0", "WR=1", "", "WB1=1", "WB0=1", "D15", "D14", "", "D0"]},
        {"name": "spi_miso", "wave": "0............................."},
        {},
        {"name": "SPI", "wave": "x.3.......4.......5........x..", "data": ["Address", "Control byte", "Data word"]},
        {"name": "LocalBus", "wave": "x..........................2..", "data": ["Write"]}
    ]}

Транзакция записи на LocalBus начинается сразу после получения последнего бита данных и должна завершиться до следующего передачи по SPI.
В SPI отсутствуют back-pressure механизмы, поэтому возможные коллизии должны быть предотвращены правильным проектированием системы.

Чтение
------

* Чтение данных ``D15-D0`` по адресу ``A7-A0``.
* MSB бит контрольного байта равен 0 (операция чтения).
* ``WB1``, ``WB0`` - байты стробов записи всегда устанавливаются в 0 в процессе чтения.

.. wavedrom::

    {"signal": [
        {"name": "spi_sck", "wave": "0..HLHL|.HLHL|.HLHL.HLHL|.HL.."},
        {"name": "spi_cs_n", "wave": "10...........................1"},
        {"name": "spi_mosi", "wave": "0.3.3.3|3.4.4|4.4.0...........", "data": ["A7", "A6", "", "A0", "RD=0", "", "WB1=0", "WB0=0"]},
        {"name": "spi_miso", "wave": "0..................5.5.5|5.0..", "data": ["D15", "D14", "", "D0"]},
        {},
        {"name": "SPI", "wave": "x.3.......4.......5........x..", "data": ["Address", "Control byte", "Data word"]},
        {"name": "LocalBus", "wave": "x...........2.....x...........", "data": ["Read"]}
    ]}

Транзакция чтения на шине LocalBus начинается сразу после получения старшего бита контрольного байта и должна быть завершена перед передачей данных на ``spi_miso``.
В SPI отсутствуют back-pressure механизмы, поэтому возможные коллизии должны быть предотвращены правильным проектированием системы.